import numpy as np
import pandas as pd
pd.set_option('max_columns', None)
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline
plt.style.use('ggplot')
import datetime
from scipy import stats
from scipy.sparse import hstack, csr_matrix
from sklearn.model_selection import train_test_split, KFold
from wordcloud import WordCloud
from collections import Counter
from nltk.corpus import stopwords
from nltk.util import ngrams
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
from sklearn.preprocessing import StandardScaler
import nltk
nltk.download('stopwords')
stop = set(stopwords.words('english'))
import os
import plotly.offline as py
py.init_notebook_mode(connected=True)
import plotly.graph_objs as go
import plotly.tools as tls
import json
import ast
from urllib.request import urlopen
from PIL import Image

train =pd.read_csv('data/train.csv')
test =pd.read_csv('data/test.csv')

fig , ax = plt.subplots(figsize=(16,6))
plt.subplot(1,2,1)
sns.distplot(train['revenue'], kde=False)
plt.title('Distribution of Revenue')
plt.subplot(1,2,2)
sns.distplot(np.log1p(train['revenue']), kde=False)
plt.title('Distribution of log-transformed revenue')

train['log_revenue'] = np.log1p(train['revenue'])

plt.figure(figsize=(16,8))
plt.subplot(1,2,1)
sns.scatterplot(train['budget'], train['revenue'])
plt.title('Revenue vs Budget');
plt.subplot(1,2,2)
sns.scatterplot(np.log1p(train['budget']), train['log_revenue'])
plt.title('Log Revenue vs Log Budget')

train['log_budget']=np.log1p(train['budget'])
test['log_budget']=np.log1p(test['budget'])

train['log_budget']=np.log1p(train['budget'])

train['has_homepage'] = 0
train.loc[train['homepage'].isnull() == False, 'has_homepage'] = 1
test['has_homepage'] = 0
test.loc[test['homepage'].isnull() == False, 'has_homepage'] =1

sns.catplot(x='has_homepage', y='revenue',data=train)
plt.title('Revenue for films with and without homepage')

language_data=train.loc[train['original_language'].isin(train['original_language'].value_counts().head(10).index)]

plt.figure(figsize=(16,8))
plt.subplot(1,2,1)
sns.boxplot(x='original_language', y='revenue', data=language_data)
plt.title("Mean revenue per language")
plt.subplot(1,2,2)
sns.boxplot(x='original_language', y='log_revenue', data=language_data)
plt.title("Mean log revenue per language")

plt.figure(figsize=(12,12))
text = ' '.join(train['original_title'].values)
worldcloud = WordCloud(max_font_size=None,
                       background_color='white',
                       width=1200,height=1000).generate(text)
plt.imshow(worldcloud)
plt.title('Top words across movie titles')
plt.axis('off')
plt.show()

plt.figure(figsize=(12,12))
text = ' '.join(train['overview'].fillna("").values)
worldcloud = WordCloud(max_font_size=None,
                       background_color='white',
                       width=1200,height=1000).generate(text)
plt.imshow(worldcloud)
plt.title('Top words across movie overviews')
plt.axis('off')
plt.show()

import eli5
from sklearn.linear_model import LinearRegression

vectorizer = TfidfVectorizer(
    sublinear_tf=True,
    analyzer='word',
    token_pattern=r'\w{1,}',
    ngram_range=(1, 2),
    min_df=5
)
overview_text = vectorizer.fit_transform(train['overview'].fillna(" "))
linreg = LinearRegression()
linreg.fit(overview_text,train['log_revenue'])
eli5.show_weights(linreg, vec=vectorizer, top=20, feature_filter=lambda x: x!= '<BIAS>')



test.loc[test['release_date'].isnull() == False, 'release_date'].head()

def fix_date(x):
    year = x.split('/')[2]
    if int(year) <= 19:
        return x[:-2] + '20' + year
    else:
        return x[:-2] + '19' + year



test.loc[test['release_date'].isnull() == False, 'release_date'].head()

test.loc[test['release_date'].isnull() == True, 'release_date'] = '05/01/00'
train['release_date']= train['release_date'].apply(lambda x: fix_date(x))
test['release_date']= test['release_date'].apply(lambda x: fix_date(x))

train['release_date']=pd.to_datetime(train['release_date'])
test['release_date']= pd.to_datetime(test['release_date'])

def process_date(df):
    date_parts = ['year', 'weekday', 'month', 'weekofyear', 'day','quarter']
    for part in date_parts:
        part_col='release_date' + '_' + part
        df[part_col]= getattr(df['release_date'].dt,part).astype(int)
    
    return df
train= process_date(train)
test = process_date(test)

d1= train['release_date_year'].value_counts().sort_index()
d2=test['release_date_year'].value_counts().sort_index()

import plotly.offline as py
py.init_notebook_mode(connected=True)
import plotly.graph_objs as go

data = [go.Scatter(x=d1.index,y=d1.values, name='train'),
       go.Scatter(x=d2.index,y=d2.values,name='test')]
layout = go.Layout(dict(title= 'Number of films per year',
                       xaxis=dict(title='Year'),
                       yaxis=dict(title='Count')
                       ), legend = dict(orientation='v'))
py.iplot(dict(data=data,layout=layout))

d1= train['release_date_year'].value_counts().sort_index()
d2= train.groupby(['release_date_year'])['revenue'].mean()

data = [go.Scatter(x=d1.index,y=d1.values, name='Film count'),
       go.Scatter(x=d2.index,y=d2.values,name='mean revenue',yaxis='y2')]
layout = go.Layout(dict(title= 'Number of films and average revenue per year',
                       xaxis=dict(title='Year'),
                       yaxis=dict(title='Count'),
                       yaxis2=dict(title='Average revenue', overlaying='y', side='right' )),
                   legend = dict(orientation='v'))
py.iplot(dict(data=data,layout=layout))

sns.catplot(x='release_date_weekday',y='revenue',data=train)
plt.title('revenue of different days the week')
sns.distplot(train['runtime'].fillna(0)/60,bins=40, kde=False)
plt.title('Distribution of length of films in hour')

sns.scatterplot(train['runtime'].fillna(0)/60, train['revenue'])
plt.title('Runtime vs Revenue')


